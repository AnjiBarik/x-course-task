import React, { useEffect, useState, useContext } from 'react';
import { Navigate } from 'react-router-dom';
import Footer from "../footer/Footer";
import Header from '../header/Header';
import Shelf from './Shelf';
import './bookList.css';
import { BooksContext } from '../../BooksContext';

export default function BookList() {
  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  const { books, theme, setTheme } = useContext(BooksContext);

  // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–º—É
  const toggleTheme = () => {
    setTheme(theme => (theme === 'light' ? 'dark' : 'light'));
  };

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ö—É–∫ `useState` –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
  const [input, setInput] = useState('');
  const [select, setSelect] = useState('default');
  const [sortedBooks, setSortedBooks] = useState([...books]);

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ö—É–∫ `useEffect` –¥–ª—è –≤–∏–∫–ª–∏–∫—É `findBook` –ø—Ä–∏ –∑–º—ñ–Ω—ñ `input` —Ç–∞ `select`
  useEffect(() => {
    findBook();
  }, [input, select]);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É localStorage. –Ø–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
  if (!localStorage.username) {
    return <Navigate to="/" redirect={true} />;
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–∏–∂–æ–∫
  function findBook() {
    let sortedBooksCopy = [...books];

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–Ω–∏–∂–∫–∏ –∑–∞ –≤–≤–µ–¥–µ–Ω–∏–º —Ä—è–¥–∫–æ–º –ø–æ—à—É–∫—É
    sortedBooksCopy = sortedBooksCopy.filter(el =>
      el.title.toLowerCase().includes(input.trim().toLowerCase())
    );

    // –°–æ—Ä—Ç—É—î–º–æ –∫–Ω–∏–∂–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ–±—Ä–∞–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    if (select === 'lowPrice') {
      setSortedBooks(
        sortedBooksCopy.filter(el => el.price <= 15).sort((a, b) => a.price - b.price)
      );
    } else if (select === 'midPrice') {
      setSortedBooks(
        sortedBooksCopy.filter(el => el.price > 15 && el.price <= 30).sort((a, b) => a.price - b.price)
      );
    } else if (select === 'highPrice') {
      setSortedBooks(sortedBooksCopy.filter(el => el.price > 30).sort((a, b) => a.price - b.price));
    } else {
      setSortedBooks(sortedBooksCopy); // –ó–∞–ª–∏—à–∞—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    }
  }

  return (
    <>
      <section className={theme}>
        <section className="header">
         <Header />
        </section>
        <section className="filters">
          {/* –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–º—ñ–Ω–∏ —Ç–µ–º–∏ */}
          <button className="thembutton button" onClick={toggleTheme}>
            {theme === 'light' ? 'üîÖ' : 'üîÜ'}
          </button>
          {/* –ü–æ—à—É–∫ –∑–∞ —ñ–º'—è–º */}
          <input
            onChange={e => setInput(e.target.value)}
            type="search"
            id="searchName"
            placeholder="üîéSearch by book name"
          />
          {/* –í–∏–±—ñ—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Ü—ñ–Ω–æ—é */}
          <select onChange={e => setSelect(e.target.value)} id="sortPrice" title="sortPrice" autoComplete="off">
            <option value="default">default</option>
            <option value="lowPrice">from 0 to 15</option>
            <option value="midPrice">from 15 to 30</option>
            <option value="highPrice">more than 30</option>
          </select>
        </section>
        {/* –ü–µ—Ä–µ–¥–∞—î–º–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤ –∫–Ω–∏–∂–æ–∫ —É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç `Shelf` */}
        <Shelf book={sortedBooks} />
        <Footer />
      </section>
    </>
  );
}